/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs')
const path = require('path')

const getFilesName = () => {
  const files = fs
    .readdirSync('src/assets')
    .filter(file => file.endsWith('.svg') || file.endsWith('.png') || file.endsWith('.gif'))
    .map(file => file.replace('@2x.png', '.png').replace('@3x.png', '.png'))

  return Array.from(new Set(files))
}

const getComponentName = s =>
  s
    .replace(/_./g, x => x[1].toUpperCase())
    .replace(/\.\w+$/g, '')
    .substring(3)

const getImport = s => `require('./${s}')${s.match(/.svg$/) ? '.default' : ''}`
const getType = s => (s.match(/.svg$/) ? 'FC<SvgProps>' : 'ImageSourcePropType')
const getFileNameInCamelCase = s => s.replace(/_./g, x => x[1].toUpperCase()).replace(/\.\w+$/g, '')

const generate = () => {
  console.log('\nGenerating src/assets/index.tsx...')

  const types = getFilesName().reduce(
    (output, name) => {
      const isVector = name.match(/.svg$/)
      const type = `  ${getFileNameInCamelCase(name)}: ${getType(name)}`
      return {
        bitmap: [...output.bitmap, ...(!isVector ? [type] : [])],
        vector: [...output.vector, ...(isVector ? [type] : [])],
      }
    },
    { bitmap: [], vector: [] },
  )

  const properties = getFilesName()
    .map(
      name => `/**
   * ![${name}](file://${path.resolve(__dirname, '../src/assets', name)})
   */
  ${getFileNameInCamelCase(name)}: ${getImport(name)}`,
    )
    .join(',\n  ')

  const components = getFilesName().reduce(
    (output, name) => {
      const isIcon = name.startsWith('icn') && name.endsWith('.svg')
      const isImage = name.startsWith('img')

      const iconComponent = `  /**
   * ![${name}](file://${path.resolve(__dirname, '../src/assets', name)})
   */
  ${getComponentName(
    name,
  )}: ({ size, fill, style, stroke, testID, color = 'transparent' }: IconPropsType): JSX.Element => {
    const Svg = ${getImport(name)}
    return (
      <Svg testID={testID} fill={fill || color} stroke={stroke || color} width={size} height={size} style={style} />
    )
  }
`
      const imageComponent = `  /**
   * ![${name}](file://${path.resolve(__dirname, '../src/assets', name)})
   */
  ${getComponentName(
    name,
  )}: (props: Omit<FastImageProps, 'source'>): JSX.Element => <FastImage {...props} source={${getImport(name)}} />
`

      return {
        icons: [...output.icons, ...(isIcon ? [iconComponent] : [])],
        images: [...output.images, ...(isImage ? [imageComponent] : [])],
      }
    },
    { icons: [], images: [] },
  )

  const file = `//
// NOTE: THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
//

/* eslint-disable @typescript-eslint/no-var-requires */
  
import type { FC } from 'react'
import type { SvgProps } from 'react-native-svg'
import FastImage, { FastImageProps } from 'react-native-fast-image'
import type { ImageSourcePropType, ViewProps, ViewStyle, StyleProp } from 'react-native'

export type AssetsBitmapType = {
${types.bitmap.join('\n')}
}

export type AssetsVectorType = {
${types.vector.join('\n')}
}

export interface IconPropsType {
  size?: number
  color?: string
  fill?: string
  stroke?: string
  style?: StyleProp<ViewStyle>
  testID?: ViewProps['testID']
}

export type IconType = typeof Icons[keyof typeof Icons]

export const Icons = {
${components.icons}
}

export const Images = {
${components.images}
}

export const Assets = {
${properties},
}
`

  fs.writeFileSync('src/assets/index.tsx', file, 'utf8')
}

generate()
